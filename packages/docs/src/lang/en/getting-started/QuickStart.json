{
  "header": "# Quick start",
  "headerText": "Use one of the Vuetify Vue CLI packages _(based on the official examples)_ to get your project started in no time. Vuetify supports **SSR** (server-side rendering), **SPA** (single page application), **PWA** (progressive web application) and standard **HTML** pages.",
  "instructionsHeader": "## Instructions",
  "instructionsText1": "Something something different instructions depending on what type of project.",
  "vueCliHeader": "### Vue CLI",
  "vueCliText1": "Vue CLI is the preferred way to create and manage your vue/vuetify projects, etc etc instructions are [here](/getting-started/vue-cli)",
  "webpackHeader": "### Webpack",
  "webpackText1": "If your project uses webpack, you can find instructions [here](/getting-started/webpack)",
  "cdnHeader": "### CDN",
  "cdnText1": "To test using Vuetify.js without installing a template from Vue CLI, copy the code below into your `index.html`. This will pull the latest version of Vue and Vuetify, allowing you to start playing with components. You can also use the [Codepen template](https://template.vuetifyjs.com).",
  "cdnText2": "While not recommended, if you need to utilize the cdn packages in a _production_ environment, it is recommended that you scope the versions of your assets. For more information on how to do this, navigate to the [jsdelivr](https://www.jsdelivr.com/) website.",
  "browserHeader": "## Supported Browsers",
  "browserText": "Vuetify is a progressive framework that attempts to push web development to the next level. In order to best accomplish this task, some sacrifices had to be made in terms of support for older versions of Internet Explorer. This is not an exhaustive list of compatible browsers, but the main targeted ones.",
  "newHeader": "## New applications",
  "alert2": "*Warning*: While Vuetify attempts to not cause any css collision as much as possible, there is no guarantee that your custom styles will not alter your experience when integrating this framework into your existing project.",
  "edgeHeader": "## Edge support",
  "edgeText1": "`vuetify/lib` now uses ES6, which can cause some script errors when used with Edge browser (non-chromium). Additionally, in order to support **modern mode** in vue-cli-3, `vuetify/lib` is not transpiled. For these scenarios, you must tell vue-cli to transpile the `vuetify` package. This will be automatically handled in the future by vue-cli-plugin-vuetify pending a bug fix for vue-cli-3.",
  "ie11Header": "## IE11 & Safari 9 support",
  "ie11Text": "Vuetify utilizes features of ES2015/2017 that require the need to use polyfills for **Internet Explorer 11** and **Safari 9/10**. If you are using Vue CLI 3, this is done automatically for you. Otherwise, in your project directory, you can install `babel-polyfill`:",
  "ie11Text1": "Vuetify utilizes features of ES2015/2017 that require the need to use polyfills for **Internet Explorer 11** and **Safari 9/10**. If you are using Vue CLI 3, this is done automatically for you. Otherwise, in your project directory, you can install `babel-polyfill`:",
  "ie11Text2": "It is important to include the plugin as early as possible within your main **index.js** file. If using a Vuetify SSR package, this will apply to the **client-entry.js** file",
  "ie11Text3": "It is recommended that you use `babel-preset-env` with the corresponding polyfill to ensure only the necessary polyfills are added to your application. For more information on `babel-preset-env`, [visit the documentation](https://babeljs.io/docs/en/next/babel-preset-env.html)",
  "ie11Text4": "Once installed, add the preset to your `.babelrc` or `babel.config.js`",
  "ie11Text5": "Unfortunately Vue CLI 3 doesn't automatically bring IE11 compatibility in which you may encounter various errors (such as <i>Symbol is not defined</i>). To assist in resolving these errors you may need to manually add `transpileDependencies` parameter in `vue.config.js`",
  "ie11Text6": "Due to Internet Explorer's limited support for `<template>` tags, you must send fully compiled dom elements to the browser. This can be done by either building your Vue code in advance or by creating helper components to replace the dom elements. For instance, if sent directly to IE, this will fail:",
  "browserSupport": {
    "supported": "Supported",
    "notSupported": "Not supported",
    "polyfill": "Supported with polyfill"
  }
}
